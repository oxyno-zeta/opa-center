type DecisionLog {
  id: String!
  createdAt: String!
  updatedAt: String!
  decisionId: String!
  path: String!
  requestedBy: String!
  timestamp: String!
  originalMessage: String!
  partition: Partition!
}

type DecisionLogConnection {
  edges: [DecisionLogEdge]
  pageInfo: PageInfo!
}

type DecisionLogEdge {
  cursor: String!
  node: DecisionLog
}

input DecisionLogSortOrder {
  createdAt: SortOrderEnum
  updatedAt: SortOrderEnum
  path: SortOrderEnum
  requestedBy: SortOrderEnum
  timestamp: SortOrderEnum
}

input DecisionLogFilter {
  createdAt: DateFilter
  updatedAt: DateFilter
  decisionId: StringFilter
  path: StringFilter
  requestedBy: StringFilter
  timestamp: DateFilter
}
type Partition {
  id: String!
  createdAt: String!
  updatedAt: String!
  name: String!
}

type PartitionConnection {
  edges: [PartitionEdge]
  pageInfo: PageInfo!
}

type PartitionEdge {
  cursor: String!
  node: Partition
}

input CreatePartitionInput {
  name: String!
}

type CreatePartitionPayload {
  partition: Partition
}

input PartitionSortOrder {
  createdAt: SortOrderEnum
  updatedAt: SortOrderEnum
  name: SortOrderEnum
}

input PartitionFilter {
  createdAt: DateFilter
  updatedAt: DateFilter
  name: StringFilter
}
# Query
type Query {
  """
  Get partitions
  """
  partitions(
    """
    Cursor delimiter after you want data (used with first only)

    See here: https://relay.dev/graphql/connections.htm#sec-Forward-pagination-arguments
    """
    after: String
    """
    Cursor delimiter before you want data (used with after only)

    See here: https://relay.dev/graphql/connections.htm#sec-Backward-pagination-arguments
    """
    before: String
    """
    First elements

    See here: https://relay.dev/graphql/connections.htm#sec-Forward-pagination-arguments
    """
    first: Int
    """
    Last elements (used only with before)

    See here: https://relay.dev/graphql/connections.htm#sec-Backward-pagination-arguments
    """
    last: Int
    """
    Sort
    """
    sort: PartitionSortOrder
    """
    Filter
    """
    filter: PartitionFilter
  ): PartitionConnection

  """
  Get partition
  """
  partition(id: String!): Partition

  """
  Generate OPA Configuration file
  """
  opaConfiguration(partitionId: String!): String!

  """
  Get decision logs
  """
  decisionLogs(
    """
    Partition Id in which decision logs must be searched
    """
    partitionId: String!
    """
    Cursor delimiter after you want data (used with first only)

    See here: https://relay.dev/graphql/connections.htm#sec-Forward-pagination-arguments
    """
    after: String
    """
    Cursor delimiter before you want data (used with after only)

    See here: https://relay.dev/graphql/connections.htm#sec-Backward-pagination-arguments
    """
    before: String
    """
    First elements

    See here: https://relay.dev/graphql/connections.htm#sec-Forward-pagination-arguments
    """
    first: Int
    """
    Last elements (used only with before)

    See here: https://relay.dev/graphql/connections.htm#sec-Backward-pagination-arguments
    """
    last: Int
    """
    Sort
    """
    sort: DecisionLogSortOrder
    """
    Filter
    """
    filter: DecisionLogFilter
  ): DecisionLogConnection

  """
  Get decision log
  """
  decisionLog(id: String, decisionLogId: String): DecisionLog

  """
  Get statuses
  """
  statuses(
    """
    Partition Id in which statuses must be searched
    """
    partitionId: String!
    """
    Cursor delimiter after you want data (used with first only)

    See here: https://relay.dev/graphql/connections.htm#sec-Forward-pagination-arguments
    """
    after: String
    """
    Cursor delimiter before you want data (used with after only)

    See here: https://relay.dev/graphql/connections.htm#sec-Backward-pagination-arguments
    """
    before: String
    """
    First elements

    See here: https://relay.dev/graphql/connections.htm#sec-Forward-pagination-arguments
    """
    first: Int
    """
    Last elements (used only with before)

    See here: https://relay.dev/graphql/connections.htm#sec-Backward-pagination-arguments
    """
    last: Int
    """
    Sort
    """
    sort: StatusSortOrder
    """
    Filter
    """
    filter: StatusFilter
  ): StatusConnection

  """
  Get status
  """
  status(id: String!): Status
}

# Mutation
type Mutation {
  createPartition(input: CreatePartitionInput!): CreatePartitionPayload
}
type Status {
  id: String!
  createdAt: String!
  updatedAt: String!
  originalMessage: String!
  partition: Partition!
}

type StatusConnection {
  edges: [StatusEdge]
  pageInfo: PageInfo!
}

type StatusEdge {
  cursor: String!
  node: Status
}

input StatusSortOrder {
  createdAt: SortOrderEnum
  updatedAt: SortOrderEnum
}

input StatusFilter {
  createdAt: DateFilter
  updatedAt: DateFilter
}
"""
Pagination information
"""
type PageInfo {
  """
  Has a next page ?
  """
  hasNextPage: Boolean!
  """
  Has a previous page ?
  """
  hasPreviousPage: Boolean!
  """
  Shortcut to first edge cursor in the result chunk
  """
  startCursor: String
  """
  Shortcut to last edge cursor in the result chunk
  """
  endCursor: String
}

"""
Sort for enumeration
"""
enum SortOrderEnum {
  ASC
  DESC
}

"""
String filter structure
"""
input StringFilter {
  """
  Allow to test equality to
  """
  eq: String
  """
  Allow to test non equality to
  """
  notEq: String
  """
  Allow to test if a string contains another string.
  """
  contains: String
  """
  Allow to test if a string isn't containing another string.
  """
  notContains: String
  """
  Allow to test if a string starts with another string.
  """
  startsWith: String
  """
  Allow to test if a string isn't starting with another string.
  """
  notStartsWith: String
  """
  Allow to test if a string ends with another string.
  """
  endsWith: String
  """
  Allow to test if a string isn't ending with another string.
  """
  notEndsWith: String
  """
  Allow to test if value is in array
  """
  in: [String]
  """
  Allow to test if value isn't in array
  """
  notIn: [String]
}

"""
Integer filter structure
"""
input IntFilter {
  """
  Allow to test equality to
  """
  eq: Int
  """
  Allow to test non equality to
  """
  notEq: Int
  """
  Allow to test greater or equal than
  """
  gte: Int
  """
  Allow to test not greater or equal than
  """
  notGte: Int
  """
  Allow to test greater than
  """
  gt: Int
  """
  Allow to test not greater than
  """
  notGt: Int
  """
  Allow to test less or equal than
  """
  lte: Int
  """
  Allow to test not less or equal than
  """
  notLte: Int
  """
  Allow to test less than
  """
  lt: Int
  """
  Allow to test not less than
  """
  notLt: Int
  """
  Allow to test if value is in array
  """
  in: [Int]
  """
  Allow to test if value isn't in array
  """
  notIn: [Int]
}

"""
Boolean filter structure
"""
input BooleanFilter {
  """
  Allow to test equality to
  """
  eq: Boolean
  """
  Allow to test non equality to
  """
  notEq: Boolean
}

"""
Date filter structure
"""
input DateFilter {
  """
  Allow to test equality to
  """
  eq: String
  """
  Allow to test non equality to
  """
  notEq: String
  """
  Allow to test greater or equal than
  """
  gte: String
  """
  Allow to test not greater or equal than
  """
  notGte: String
  """
  Allow to test greater than
  """
  gt: String
  """
  Allow to test not greater than
  """
  notGt: String
  """
  Allow to test less or equal than
  """
  lte: String
  """
  Allow to test not less or equal than
  """
  notLte: String
  """
  Allow to test less than
  """
  lt: String
  """
  Allow to test not less than
  """
  notLt: String
  """
  Allow to test if value is in array
  """
  in: [String]
  """
  Allow to test if value isn't in array
  """
  notIn: [String]
}
