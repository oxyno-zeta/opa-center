type Partition {
  id: ID!
  createdAt: String!
  updatedAt: String!
  name: String!
  statusDataRetention: String
  decisionLogRetention: String
  """
  Generate OPA Configuration file
  """
  opaConfiguration: String!
  """
  Get statuses
  """
  statuses(
    """
    Cursor delimiter after you want data (used with first only)

    See here: https://relay.dev/graphql/connections.htm#sec-Forward-pagination-arguments
    """
    after: String
    """
    Cursor delimiter before you want data (used with after only)

    See here: https://relay.dev/graphql/connections.htm#sec-Backward-pagination-arguments
    """
    before: String
    """
    First elements

    See here: https://relay.dev/graphql/connections.htm#sec-Forward-pagination-arguments
    """
    first: Int
    """
    Last elements (used only with before)

    See here: https://relay.dev/graphql/connections.htm#sec-Backward-pagination-arguments
    """
    last: Int
    """
    Sort
    """
    sort: StatusSortOrder
    """
    Filter
    """
    filter: StatusFilter
  ): StatusConnection
  """
  Get decision logs
  """
  decisionLogs(
    """
    Cursor delimiter after you want data (used with first only)

    See here: https://relay.dev/graphql/connections.htm#sec-Forward-pagination-arguments
    """
    after: String
    """
    Cursor delimiter before you want data (used with after only)

    See here: https://relay.dev/graphql/connections.htm#sec-Backward-pagination-arguments
    """
    before: String
    """
    First elements

    See here: https://relay.dev/graphql/connections.htm#sec-Forward-pagination-arguments
    """
    first: Int
    """
    Last elements (used only with before)

    See here: https://relay.dev/graphql/connections.htm#sec-Backward-pagination-arguments
    """
    last: Int
    """
    Sort
    """
    sort: DecisionLogSortOrder
    """
    Filter
    """
    filter: DecisionLogFilter
  ): DecisionLogConnection
}

type PartitionConnection {
  edges: [PartitionEdge]
  pageInfo: PageInfo!
}

type PartitionEdge {
  cursor: String!
  node: Partition
}

input CreatePartitionInput {
  name: String!
  statusDataRetention: String
  decisionLogRetention: String
}

input UpdatePartitionInput {
  id: ID!
  statusDataRetention: String
  decisionLogRetention: String
}

type GenericPartitionPayload {
  partition: Partition
}

input PartitionSortOrder {
  createdAt: SortOrderEnum
  updatedAt: SortOrderEnum
  name: SortOrderEnum
  statusDataRetention: SortOrderEnum
  decisionLogRetention: SortOrderEnum
}

input PartitionFilter {
  AND: [PartitionFilter]
  OR: [PartitionFilter]
  createdAt: DateFilter
  updatedAt: DateFilter
  name: StringFilter
  statusDataRetention: StringFilter
  decisionLogRetention: StringFilter
}
